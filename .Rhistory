set.seed(3033)
intrain <- createDataPartition(y = heart_df$V14, p= 0.7, list = FALSE)
training <- heart_df[intrain,]
testing <- heart_df[-intrain,]
dim(training)
dim(testing)
anyNA(heart_df)
summary(heart_df)
training[["V14"]] = factor(training[["V14"]])
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(3233)
svm_Linear <- train(V14 ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
ali<-name("hossam")
ali<-wname("hossam")
ali<-name("hossam")
what the metter of ("hossam")
x<-"hossam"
x
w<- read.csv(file.choose())
q<-w%>%filter(hosssam)
library(cars)
head(cars)
scatter.smooth(x=cars$speed,y=cars$dist,main='Dist~Speed')
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars$speed)$out))  # box plot for 'speed'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))  # box plot for 'distance'
library(e1071)
par(mfrow=c(1, 2))
plot(density(cars$speed), main="Density Plot: Speed", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$speed), 2)))  # density plot for 'speed'
polygon(density(cars$speed), col="red")
plot(density(cars$dist), main="Density Plot: Distance", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$dist), 2)))  # density plot for 'dist'
polygon(density(cars$dist), col="red")
cor(cars$speed,cars$dist)
lin<-lm(dist~speed,data = cars)
print(lin)
summary(lin)
set.seed(200)
trainData<-sample(1:.8*(nrow(cars)),)
testData<-(trainData+1,)
set.seed(200)
trainData<-sample[1:.8*(nrow(cars)),]
testData<-[trainData+1,]
set.seed(200)
x<-round(nrow(cars)*0.8)
trainData<-cars[1:x,]
testData<-cars[(x+1):nrow(cars),]
fitModel<-lm(dist~speed,data=cars)
fitModel<-lm(dist~speed,data=trainData)
presictModel<-predict(fitModel,testData)
presictModel
summary(fitModel)
library(cars)
head(cars)
scatter.smooth(x=cars$speed,y=cars$dist,main='Dist~Speed')
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars$speed)$out))  # box plot for 'speed'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))  # box plot for 'distance'
par(mfrow=c(1, 2))
plot(density(cars$speed), main="Density Plot: Speed", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$speed), 2)))  # density plot for 'speed'
polygon(density(cars$speed), col="red")
plot(density(cars$dist), main="Density Plot: Distance", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$dist), 2)))  # density plot for 'dist'
polygon(density(cars$dist), col="red")
cor(cars$speed,cars$dist)
lin<-lm(dist~speed,data = cars)
print(lin)
summary(lin)
set.seed(200)
x<-round(nrow(cars)*0.8)
trainData<-cars[1:x,]
testData<-cars[(x+1):nrow(cars),]
fitModel<-lm(dist~speed,data=trainData)
presictModel<-predict(fitModel,testData)
summary(fitModel)
set.seed(100)
x<-round(nrow(cars)*0.8)
trainData<-cars[1:x,]
testData<-cars[(x+1):nrow(cars),]
fitModel<-lm(dist~speed,data=trainData)
presictModel<-predict(fitModel,testData)
summary(fitModel)
set.seed(100)
x<-sample(nrow(cars)*0.8)
trainData<-cars[1:x,]
testData<-cars[(x+1):nrow(cars),]
fitModel<-lm(dist~speed,data=trainData)
presictModel<-predict(fitModel,testData)
summary(fitModel)
set.seed(100)
x<-(nrow(cars)*0.8)
trainData<-cars[1:x,]
testData<-cars[(x+1):nrow(cars),]
fitModel<-lm(dist~speed,data=trainData)
presictModel<-predict(fitModel,testData)
summary(fitModel)
library(cars)
head(cars)
scatter.smooth(x=cars$speed,y=cars$dist,main='Dist~Speed')
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars$speed)$out))  # box plot for 'speed'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))  # box plot for 'distance'
par(mfrow=c(1, 2))
plot(density(cars$speed), main="Density Plot: Speed", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$speed), 2)))  # density plot for 'speed'
polygon(density(cars$speed), col="red")
plot(density(cars$dist), main="Density Plot: Distance", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$dist), 2)))  # density plot for 'dist'
polygon(density(cars$dist), col="red")
cor(cars$speed,cars$dist)
lin<-lm(dist~speed,data = cars)
print(lin)
summary(lin)
set.seed(100)
x<-(nrow(cars)*0.8)
trainData<-cars[1:x,]
testData<-cars[(x+1):nrow(cars),]
fitModel<-lm(dist~speed,data=trainData)
presictModel<-predict(fitModel,testData)
summary(fitModel)
source('C:/Users/user/Desktop/DataManipulationR.R')
find.package()
installed.packages()
install.packages("ggplot2movies",
"nycflights13","odbc",
"writexl", "openxlsx",)
install.packages("ggplot2movies")
install.packages("nycflights13")
install.packages("odbc")
install.packages("writexl")
install.packages("openxlsx")
download.packages()
library(ggplots)
library(ggplot2movies)
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(purrr)
library(MASS)
set.seed(1)
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(2)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(6666)
rnorm(3)
rnorm(3,5,1)
set.seed(6666)
rnorm(3,5,1)
rnorm(3,5,1)
rnorm(3,5,1)
rnorm(3,5,1)
set.seed(6666)
rnorm(3,5,1)
set.seed(6)
sample(1:10)
sample(1:10)
sample(1:10)
set.seed(6)
sample(1:10)
sample(1:10,4)
sample(1:10,replace = T)
sample(1:10)
sample(1:10,4,replace = T)
set.seed(2)
sample(1:10,4,replace = T)
sample(1:10,4,replace = T)
set.seed(2)
sample(1:10,4,replace = T)
rnorm(10)
sample(10)
rnorm(10,1)
rnorm(10,1)
sample(5)
install.packages(parallel)
set.seed()
set.seed(1)
rpois(5,2)
rpois(5,1)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
source('C:/Users/user/Desktop/DataManipulationR/ggplot.R')
source('http://bioconductor.org/biocLite.R')
source('http://bioconductor.org/biocLite.R')
install.packages("rhdf5")
s<-data.frame(x=c(1,2,3),y=c(2,3,5))
s
s<-data.frame(x=c(4,9,1),y=c(10,3,7))
s
arrange(s)
arrange(s,x)
library(ggplot2)
library(ggplot2movies)
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(purrr)
library(MASS)
library(plyr)
arrange(s,x)
set.seed(99)
rnorm(1e5)
w<-rnorm(1e5)
object.size(w)
object.size(w,unit="Mb")
print(object.size(w,units="Mb"))
print(object.size(w,units="mb"))
print(object.size(w),units="mb")
print(object.size(w),units="Mb")
x<-c(1,4,5,9)
seq(along = x)
seq(1,10)
seq(1,10,by =3)
seq(1,10,length =3)
seq(1,10,length =4)
seq(rnorm(10))
seq(rnorm(100))
yesno<-sample(c("yes","no"),size = 10 ,replace = T)
yesnofac = factor(yesno,levels = c("yes","no"))
relevel(yesnofac,ref = "yes")
relevel(yesnofac,ref = "no")
as.numeric(yesnofac)
relevel(yesnofac,ref = "yes")
as.numeric(yesnofac)
library(reshape2)
data("mtcars")
View(mtcars)
View(MIE)
mtcars$carnames<-rownames(mtcars)
carmelt<-;
carMelt<-melt(mtcars,id= c("carnames","gear","cyl"),measure.vars = c("mpg","hp"))
carMelt
View(carMelt)
carcast<-dcast(carMelt,cyl~variable)
carcast<-carMelt %>% dcast(cyl~variable)
View(carcast)
carcast<-carMelt %>% dcast(cyl~variable,mean)
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray,sum)
tapply(InsectSprays$count, InsectSprays$spray,mean)
tapply(InsectSprays$count, InsectSprays$spray,median)
InsectSprays %>% group_by(spray) %>% summarise(sum = sum(count))
InsectSprays %>% group_by(spray) %>% mutate(sum = sum(count))
InsectSprays %>% group_by(spray) %>% summarise(sum = n())
InsectSprays %>% group_by(spray) %>% summarise(sum = n())
InsectSprays %>% group_by(spray) %>% summarise(sum = count(count))
InsectSprays %>% group_by(spray) %>% summarise(sum = sum(count))
ddply(InsectSprays,.(spray),summarise,sum= sum(count))
InsectSprays %>% group_by(spray) %>% summarise(spray,sum = sum(count))
e<-c("aapslle")
grepl(e,"a+")
grepl(e,"a.a")
grepl(e,"a.p")
grep(e,"a.p")
grep(e,"a.a")
grep(e,"a+")
grep("a+",e)
grepl("a+",e)
grepl("a.a",e)
grepl("a.p",e)
grepl("a{2}",e)
grepl("a{3}",e)
grepl("a.{3}",e)
grepl("a.{5}",e)
grepl("a.{7}",e)
grepl("a.{6}",e)
grepl("\\W",e)
grepl("\\w",e)
e<-c("aapslle  re")
grepl("\\w",e)
grepl("\\s",e)
grepl("\\S",e)
grepl("[^p]",e)
grep("[^p]",e)
grepl("[^p]","fjfsjsops")
grep("[^p]","fjfsjsops")
grepl("[^p]","fjfsjso")
grepl("\\?","fj?sjso")
grepl("\\?","fjsjso")
grepl("\\f","fjsjso")
grepl("^f","fjsjso")
grepl("^r","fjsjso")
grepl("o$","fjsjso")
grepl("i$","fjsjso")
grepl("[^fj]+$","fjsjso")
grepl("[^fj]","fjsjso")
grepl("[f]","fjsjso")
grep("[o]","fjsjso")
length(grep("[o]","fjsjso"))
sub("[r]","y","osarm")
sub("[r]","y","osarrrrrm")
gsub("[r]","y","osarrrrrm")
strsplit("s","osarrrrrm")
strsplit("s",c("osam","ramys","samy"))
strtrim("s","osarrrrrm   t t")
str_trim("osarrrrrm   t t")
library(stringr)
str_trim("osarrrrrm   t t")
str_trim("       osarrrrrmtt       ")
nchar("trjekwl")
e<-c("samy","ramy","osama")
grepl("^[r]",e)
("^[s]",e)
grepl("^[s]",e)
date()
date()
date()
date()
date()
date()
date()
date()
s<-Sys.Date()
s
format(s,%d,%b%a)
format(s,%d,%b,%a)
format(s,%a,%b,%d)
format(s,"%a %b %d")
format(s,"%d %b %a")
weekdays(Sys.Date())
julian(Sys.Date())
library(lubridate)
ymd(20140108)
ymd("20140108")
ymd_hms("2014-08-15 10:55:09")
?Sys.timezone
weekdays(ymd("2014-05-9"))
ddays(ymd("2014-05-9"))
ydays(ymd("2014-05-9"))
wday(ymd("2014-05-9"))
wday(ymd("2014-05-9"),label = T)
library(pryr)
mem_used()
object.size()
sapply(ls(), function(x) obj_size(get(x)))
source('C:/Users/user/Desktop/DataManipulationR/ggplot.R')
library(ggplot2)
library(RColorBrewer) #brower.pal() to scale_color_manual() or scale_color_gradientn()
library(ggplot2movies)
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(purrr)
library(readr)
library(caret)
library(reshape)
library(reshape2)
library(xgboost)
library(caret)
library(jsonlite)
library(dplyr)
library(Matrix)
library(doParallel)
library(lubridate)
library(quantreg)# stat_quantile() > fit quantile regression and drow fitted quantiles to lines
library(gridExtra)#to show all geom_ i make it in same ggplot
library(ggthemes)#more theme methods like :  <theme_tufte() to remove all non_data ink
library(grid)
library(GGally)#to plt parallel coordinates to see diff variable at same time by lines
library(pastecs
s
library(datasets)
airquality<-airquality
View(airquality)
ggplot(airquality,aes(x=factor(Month)))+
geom_boxplot(col="green")
ggplot(airquality,aes(y=factor(Month)))+
geom_boxplot(col="green")
ggplot(airquality,aes(x=factor(Month)))+
geom_boxplot(col="green")
ggplot(airquality,aes(x=factor(Month)))+
geom_boxplot(aes(y=..count..),col="green")
?str(boxplot)
str(boxplot)
head(boxplot())
head(boxplot)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot(col="green")
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot(outlier.color = "red")
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = "mean",geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = mult =1 ,geom="errorbar",width=0.2)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = mean,geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = mult =1 ,geom="errorbar",width=0.2)
p<-ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
geom_jitter()+
stat_summary(fun.y = "mean",geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = mult =1 ,geom="errorbar",width=0.2)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
geom_jitter()+
stat_summary(fun.y = mean,geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = list(mult =1) ,geom="errorbar",width=0.2)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = mean,geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = list(mult =1) ,geom="errorbar",width=0.2)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = mean,geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = list(mult =1) ,geom="errorbar",width=0.5)
GGally::ggpairs(mtcars)
s<-ggplot(mtcars , aes(x= factor(cyl), y =disp))
w<-grid.arrange(
s + geom_point(),
s+ geom_jitter(),
s + stat_summary(fun.y = mean , geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = list(mult = 1),geom=  "errorbar" , width=0.2))
w + theme(panel.background = element_rect(color = "gray"),
strip.text = element_text(color = "Red"))
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
stat_summary(fun.y = mean,geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = list(mult =1) ,geom="errorbar",width=0.5)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot(geom= "errorbar")
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot(geom= "errorbar",width=0.9)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = mean ,geom="line")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "ribbon")
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
stat_summary(fun.y = mean ,geom="line")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "ribbon")
ggplot(barley, aes(x = year, y = yield, col = site, group = site, fill = site)) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "ribbon",
alpha = 0.1, col = NA)+
# Create overlapping ribbon plot from scratch
ribboin<-
ggplot(barley, aes(x = year, y = yield, col = site, group = site, fill = site)) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "ribbon",
alpha = 0.1, col = NA)+
theme_classic()
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
stat_summary(fun.y = mean ,geom="pont")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
stat_summary(fun.y = mean ,geom="point")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
stat_summary(fun.y = mean ,geom="point")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6,col = "red")
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
stat_summary(fun.y = mean ,geom="point",col = "red")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = mean ,geom="point",col = "red")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = mean ,geom="point",col = "red")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "ribbon",width = 0.6)
#load some package for help :
library(data.table)
library(ggplot2)
library(dplyr)
#load dataset and assign it to Plot1Data Variable:
Plot1Data<-read.table("household_power_consumption.txt",header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
#Subset Plot1Data for 2 days required and assing it to subdata variable :
subdata<-Plot1Data[Plot1Data$Date %in% c('1/2/2007','2/2/2007'),]
#then we need to convert Global_active_power as Numeric datatype for ploting
Global_active_power<-as.numeric(subdata$Global_active_power)
#make a PNG file name "plot1.Png" and select widths and Height :
png("plot1.png",width = 480, height = 480)
#now we going to plot Histogram for Global_active_power Variable
hist(Global_active_power,col = "red", main = "Global Active Power",xlab="Global Active Power (kilowatts)")
dev.off()
setwd("C:/Users/user/Desktop/Project_1 Explorating")
#load some package for help :
library(data.table)
library(ggplot2)
library(dplyr)
#load dataset and assign it to Plot1Data Variable:
Plot1Data<-read.table("household_power_consumption.txt",header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
#Subset Plot1Data for 2 days required and assing it to subdata variable :
subdata<-Plot1Data[Plot1Data$Date %in% c('1/2/2007','2/2/2007'),]
#then we need to convert Global_active_power as Numeric datatype for ploting
Global_active_power<-as.numeric(subdata$Global_active_power)
#make a PNG file name "plot1.Png" and select widths and Height :
png("plot1.png",width = 480, height = 480)
#now we going to plot Histogram for Global_active_power Variable
hist(Global_active_power,col = "red", main = "Global Active Power",xlab="Global Active Power (kilowatts)")
dev.off()
View(subdata)
